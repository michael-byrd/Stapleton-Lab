collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
y = 1:length(routv$result$loc.name)
vqtl::mean_var_plot_model_based
#effect sizes can not be computed for these 3 SNPs
rsizedf = sapply(y, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
head(rsizedf)
rsizedf1 <- as.data.frame(matrix(rep(0,length(y)*12), ncol= 12))
rsizedf1[1:10,1:10]
rsizedf1 <- sapply(y, function(x){
tempv <- c(rsizedf[[y]][1,2:7],rsizedf[[y]][2,2:7])
})
warnings()
rsizedf1 <- sapply(y, function(x){
tempv <- c(rsizedf[[x]][1,2:7],rsizedf[[x]][2,2:7])
})
warnings()
head(rsizedf1)
rsizedf1 <- sapply(y, function(x){
tempv <- vector(rsizedf[[x]][1,2:7],rsizedf[[x]][2,2:7])
})
x=1
warnings()
rsizedf[[x]][1,2:7]
vector(rsizedf[[x]][1,2:7])
unlist(rsizedf[[x]][1,2:7])
rsizedf1 <- sapply(y, function(x){
tempv <- c(unlist(rsizedf[[x]][1,2:7]),unlist(rsizedf[[x]][2,2:7]))
})
warnings()
head(rsizedf1)
View(rsizedf1)
#effect sizes can not be computed for these 3 SNPs
rsizedf = sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(unlist(tempm[1,2:7]),unlist(tempm[2,2:7]))
return(unlist(tempv))
}
)
})
rsizedf
return((tempv))
#effect sizes can not be computed for these 3 SNPs
rsizedf = sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(unlist(tempm[1,2:7]),unlist(tempm[2,2:7]))
return((tempv))
}
)
})
rsizedf
#effect sizes can not be computed for these 3 SNPs
rsizedf = sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = c((tempm[1,2:7]),(tempm[2,2:7]))
return(unlist(tempv))
}
)
})
rsizedf
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
View(tempm)
tempv = c((tempm[1,2:7]),(tempm[2,2:7]))
tempv
View(tempm)
tempv = as.data.frame((tempm[1,2:7]),(tempm[2,2:7]))
View(tempv)
tempv = as.data.frame(tempm[1,2:7],tempm[2,2:7])
tempv = matrix(nrow = 1, ncol = 12)
tempv = as.data.frame(tempm[1,2:7],tempm[2,2:7])
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,] = c(tempm[1,2:7],tempm[2,2:7])
View(tempv)
unlist(tempv)
#effect sizes can not be computed for these 3 SNPs
rsizedf = sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,] = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
View(rsizedf)
head(rsizedf)
#effect sizes can not be computed for these 3 SNPs
rsizedf = sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,] = c(tempm[1,2:7],tempm[2,2:7])
(unlist(tempv))
}
)
})
View(rsizedf)
as.data.frame(rsizedf)
as.data.frame(t(rsizedf))
#effect sizes can not be computed for these 3 SNPs
rsizedf = as.data.frame(t(sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,] = c(tempm[1,2:7],tempm[2,2:7])
(unlist(tempv))
}
)
})))
View(rsizedf)
View(tempm)
#effect sizes can not be computed for these 3 SNPs
rsizedf = as.data.frame(t(sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = tempm[1,2:7]
tempv[1,7:12] = tempm[2,2:7]
(unlist(tempv))
}
)
})))
View(rsizedf)
str(tempm)
str(as.vector(tempm))
detach("package:dplyr", unload=TRUE)
library("dbplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:dbplyr", unload=TRUE)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
#effect sizes can not be computed for these 3 SNPs
rsizedf = as.data.frame(t(sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = tempm[1,2:7]
tempv[1,7:12] = tempm[2,2:7]
(as.numeric(tempv))
}
)
})))
View(rsizedf)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = tempm[1,2:7]
View(tempv)
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
#effect sizes can not be computed for these 3 SNPs
rsizedf = as.data.frame(t(sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
(tempv)
}
)
})))
View(tempv)
View(rsizedf)
#effect sizes can not be computed for these 3 SNPs
rsizedf = sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
(tempv)
}
)
})
View(rsizedf)
#effect sizes can not be computed for these 3 SNPs
rsizedf = as.data.frame(t(sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
return(tempv)
}
)
})))
View(rsizedf)
#effect sizes can not be computed for these 3 SNPs
rsizedf = sapply(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
return(tempv)
}
)
})
View(rsizedf)
#effect sizes can not be computed for these 3 SNPs
rsizedf = map(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
return(tempv)
}
)
})
library("purrr")
#effect sizes can not be computed for these 3 SNPs
rsizedf = map(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
return(tempv)
}
)
})
View(rsizedf)
rsizedf
#effect sizes can not be computed for these 3 SNPs
rsizedf = map(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
return(tempv)
}, error = function(e) message(e)
)
})
rsizedf
as.data.frame(rsizedf)
#effect sizes can not be computed for these 3 SNPs
rsizedf = matrix(nrow = length(routv$result$loc.name), ncol = 12)
#effect sizes can not be computed for these 3 SNPs
rsizedf = matrix(nrow = length(routv$result$loc.name), ncol = 12)
map(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
rsizedf[x,] = tempv
}, error = function(e) message(e)
)
})
rsizedf[1:10,]
map(1:10, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
rsizedf[x,] <<- tempv
}, error = function(e) message(e)
)
})
rsizedf[1:10,]
map(y, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
rsizedf[x,] <<- tempv
}, error = function(e) message(e)
)
})
map(y, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = random,
phenotype.name = "height.in.",
genotype.names = c("AA","BB"),
focal.groups = routv$result$loc.name[x])
tempv = matrix(nrow = 1, ncol = 12)
tempv[1,1:6] = as.numeric(tempm[1,2:7])
tempv[1,7:12] = as.numeric(tempm[2,2:7])
rsizedf[x,] <<- tempv
}, error = function(e){message(e)
rsizedf[x,] <<- rep(0,12)
}
)
})
rsizedf1 <- matrix(nrow = length(y), ncol = 12)
map(y, function(x){
rsizedf1[x,] <<- rsizedf[[x]]
})
rsizedf1
# rsizedf1 <- as.data.frame(matrix(rep(0,length(y)*12), ncol= 12))
# sapply(1:length(rsizedf), function(x){
#   print(x)
#   if(!is.null(rsizedf[[x]])){
#     rsizedf1[x,] <<- c(rsizedf[[x]][1,2:7],rsizedf[[x]][2:7])
#   }
# })
nall0 <-sapply(1:dim(rsizedf1)[1], function(x){
!all(rsizedf1[x,] == 0)
})
ditch <- which(nall0 == F)
rsizedf1 <- rsizedf1[-ditch,]
keep <- 1:3235; keep<- keep[-ditch]
routvdf<- data.frame(routv$result$loc.name[keep],
routv$result$pos[keep],
routv$result$mean.lod[keep],
routv$result$mean.asymp.p[keep],
routv$result$var.lod[keep],
routv$result$var.asymp.p[keep],
routv$result$joint.lod[keep],
routv$result$joint.asymp.p[keep])
keep
routvdf<- data.frame(routv$result$loc.name[keep],
routv$result$pos[keep],
routv$result$mQTL.lod[keep],
routv$result$mQTL.asymp.p[keep],
routv$result$vQTL.lod[keep],
routv$result$vQTL.asymp.p[keep],
routv$result$mvQTL.lod[keep],
routv$result$mvQTL.asymp.p[keep])
routvdf = cbind(routvdf,rsizedf1)
colnames(routvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(routvdf, file = "RandomvQTL_LOD,Pvals,EffectSizes-2-22-18.csv")
