"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(scanvdf, file = "MultipleStress_Sample_vQTL_Height_LOD,Pvals,EffectSizes.csv",
row.names = F)
debug(scanonevar)
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom);
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom);
source('~/GitHub/Stapleton-Lab/Manching BayesNet/scanonevar_.R')
install.packages("profvis")
library('profvis')
profvis(
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom)
)
?profvis
profvis(scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom))
undebug(scanonevar)
profvis(scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom))
scanv = scanonevar(cross = cgp, mean.formula = Height ~ mean.QTL.add + mean.QTL.dom ,
var.formula =  ~ var.QTL.add + var.QTL.dom)
dat <- read.csv(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/HowellvQTL_Ratio_LOD,Pvals,EffectSizes.csv")
dat <- dat[,-1]
plot(dat$Mean.P.Value)
ggplot(data = dat) +
geom_point(aes(x = Position..cM., y = Mean.P.Value)) +
geom_hline(yintercept = .05, color = 'red')
ggplot(data = dat) +
geom_point(aes(x = Position..cM., y = Variance.P.Value)) +
geom_hline(yintercept = .05, color = 'red')
ggplot(data = dat) +
geom_point(aes(x = Position..cM., y = Joint.P.Value)) +
geom_hline(yintercept = .05, color = 'red')
?smooth
nas <- which(is.na(dat$Joint.P.Value))
yval <- smooth(dat$Joint.P.Value[-nas], kind = '3')
ggplot() +
geom_point(aes(x = dat$Position..cM.[-nas], y = as.numeric(yval))) +
geom_hline(yintercept = .05, color = 'red')
sig <- which(yval < .05)
repr <- c()
which(yval[sig][1:4] == min(yval[sig][1:4]))
repr <- c(repr,1)
which(yval[sig][5:6] == min(yval[sig][5:6]))
repr <- c(repr,5)
repr <- c(repr,7)
which(yval[sig][8:9] == min(yval[sig][8:9]))
repr <- c(repr,8)
which(yval[sig][10:11] == min(yval[sig][10:11]))
repr <- c(repr,10)
which(yval[sig][12:15] == min(yval[sig][12:15]))
repr <- c(repr,12)
which(yval[sig][16:17] == min(yval[sig][16:17]))
repr <- c(repr,16)
sig[repr]
ggplot(data = dat) +
geom_point(aes(x = Position..cM., y = Joint.P.Value)) +
geom_hline(yintercept = .05, color = 'red')
ggplot() +
geom_point(aes(x = dat$Position..cM.[-nas], y = as.numeric(yval))) +
geom_hline(yintercept = .05, color = 'red')
setwd('C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/')
dat <- read.csv(file = "VarLabels.csv")
sig <- which(dat$QTL_IDvarP_fdrTPM !="")
length(sig)
dat$QTL_IDvarP_fdrTPM[sig]
dat$Variance_P_Value_F9[sig]
x <- 1
which(dat$QTL_IDvarP_fdrTPM == x)
which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
keep[2]
keep[repr]
repr
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
repr
keep[repr]
map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr])
})
map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
})
unlist(map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
}))
repr <- unlist(map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
}))
repr
str(repr)
sig[repr]
dat$SNP_Name[repr]
cross <- read.cross(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-Object-Ratio.csv")
pdf(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/RatioSNPs.pdf")
map(repr, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP.Name[x]),
genotype.names = c("AA","BB"))
})
repr
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
map(repr, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
})
repr[1]
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
repr[2]
x
dat$SNP_Name[repr]
dev.off()
pdf(file = "RatioSNPs.pdf")
map(repr, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
})
dat$SNP_Name[repr]
x <- 1
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
x <- 2
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
x <- 3
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[x]),
genotype.names = c("AA","BB"))
x <- 4
10
map(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
x
repr[4]
as.character(dat$SNP_Name[repr][x]
)
dev.off()
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
dat$SNP_Name[repr]
length(dat$SNP_Name)
match(dat$SNP_Name[repr], dat$SNP_Name)
repr
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(match(dat$SNP_Name[repr],
dat$SNP_Name)[x]),
genotype.names = c("AA","BB"))
})
x
x <- 1:10
as.character(dat$SNP_Name[repr][x])
match(as.character(dat$SNP_Name[repr][x]), dat$SNP_Name)
repr
repr <- unlist(map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
}))
repr
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
x <- 4
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
repr[4]
dat$SNP_Name[repr][4]
as.character(dat$SNP_Name[repr][4])
which(dat$SNP_Name == dat$SNP_Name[repr][4])
x <- 4
which(dat$QTL_IDvarP_fdrTPM == x)
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
dat$Variance_P_Value_F9[keep]
min(dat$Variance_P_Value_F9[keep]
)
which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
keep[repr]
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
repr
keep
keep[repr]
keep[repr][1]
repr
x <- 1
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
repr
which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
keep
x <- 4
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
kep
keep
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
repr
keep[repr]
keep[repr][1]
repr <- unlist(map(1:10, function(x){
keep <- which(dat$QTL_IDvarP_fdrTPM == x)
repr <- which(dat$Variance_P_Value_F9[keep] == min(dat$Variance_P_Value_F9[keep]))
return(keep[repr][1])
}))
repr
dat$SNP_Name[repr]
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
x
as.character(dat$SNP_Name[repr])
cross <- read.cross(file = "C://Users/Thomas/Documents/Github/Stapleton-Lab/vQTL\ Howell/Howell-Cross-Object-Ratio.csv")
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(dat$SNP_Name[repr][x]),
genotype.names = c("AA","BB"))
})
repr
names <- read.csv(file = "Howell-Cross-Object-Ratio.csv")
names <- read.csv(file = "HowellvQTL_Ratio_LOD,Pvals,EffectSizes.csv")
names <- names$SNP.Name
pdf(file = "RatioSNPs.pdf")
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
dev.off()
dev.cur()
x <- 1
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
pdf(file = "RatioSNPs.pdf")
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
dev.off()
sapply(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
map(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
pdf(file = "RatioSNPs.pdf")
map(1:10, function(x){
mean_var_plot_model_based(cross = cross, phenotype.name = 'Ratio',
focal.groups = as.character(names[repr][x]),
genotype.names = c("AA","BB"))
})
dev.off()
#####Working with a howell Sampleset#####
#constructing the sample
library("tidyverse")
install.packages("tidyverse")
#####Working with a howell Sampleset#####
#constructing the sample
library("tidyverse")
library("qtl")
install.packages("qtl")
install.packages("vqtl")
#####Working with a howell Sampleset#####
#constructing the sample
library("tidyverse")
library("qtl")
inslibrary("vqtl")
setwd("C:/Users/mbyrd/Documents/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/vQTL Howell")
#
# mnames <- 3:ncol(crossframes)
# mnames <- sapply(mnames, function(x){
#   paste("Marker Name", eval(x-2))
# })
# samp = sample(3:dim(crossframe)[2],ceiling(dim(crossframe)[2]/100))
# crossframes = crossframe[,c(1,2,samp)]
# write.table(crossframes, "Howell-Cross-Object-Small.csv",
#             row.names = FALSE, col.names = c(colnames(crossframe)[1:2],mnames), sep = ",")
# #looking for unique markers
crossframes = read_csv("Howell-Cross-Object-Small.csv")
u1= sapply(3:dim(crossframes)[2],function(x){
unique(crossframes[c(-1,-2),x])
})
genos = unique(unlist(u1))
#Filtering out observations that aren't A,C,T, or G
ngeno = c("A","C","G","T")
x = unlist(crossframes[c(-1,-2),3])
sapply(3:ncol(crossframes), function(x){#look at each geno column
print(x)
xl = unlist(crossframes[c(-1,-2),x]) #ignore first two entries and unlist
sapply(1:132,function(y){ #evaluate each entry with this function
if (!(xl[y] %in% ngeno)){ #is it a rare genotype
xl[y] <<- "N" #if so turn it into an N
}else xl[y] = xl[y] #otherwise leave it alone
})
crossframes[c(-1,-2),eval(x)] <<- xl #the new vector replaces the original
})
ranc = sample(3:ncol(crossframes),500)
ranc = sample(3:ncol(crossframes),50)
write.table(crossframes, "Howell-Cross-ObjectC1.csv",
row.names = FALSE, col.names = T, sep = ",")
write.table(crossframes[,c(1,2,ranc)], "Howell-Cross-ObjectC1-Sample.csv",
row.names = F, col.names = T, sep = ",")
crossframec = read_csv("Howell-Cross-ObjectC1.csv")
crossframec[1:2,1:2] = ""
u2= sapply(3:dim(crossframec)[2],function(x){
unique(crossframec[c(-1,-2),x])
})
genos = unique(unlist(u2))
genos
#Filtering out observations that aren't A,C,T, or G
ngeno = c("A","C","G","T")
x = unlist(crossframes[c(-1,-2),3])
sapply(3:ncol(crossframec), function(x){#look at each geno column
print(x)
xl = unlist(crossframec[c(-1,-2),x]) #ignore first two entries and unlist
sapply(1:132,function(y){ #evaluate each entry with this function
if ((xl[y] %in% c("A","G"))){ #is it A or G
xl[y] <<- "A" #if so turn it into an A
}else if(xl[y] == "N"){ #is it an N
xl[y] <<- "N" # if so leave it as it
}else xl[y] <<- "B" #otherwise it's a B
})
crossframec[c(-1,-2),eval(x)] <<- xl #the new vector replaces the original
})
ranc = sample(3:ncol(crossframec),500)
ranc = sample(3:ncol(crossframec),50)
write.table(crossframec, "Howell-Cross-ObjectC2.csv",
row.names = FALSE, col.names = T, sep = ",")
write.table(crossframec[,c(1,2,ranc)], "Howell-Cross-ObjectC2-Sample.csv",
row.names = F, col.names = T, sep = ",")
##getting rid of redundant columns
tablec = read_csv("Howell-Cross-ObjectC2.csv")
unq = sapply(3:ncol(tablec),function(x){
print(x)
dim(unique(tablec[3:134,x]))[1]
})
uunq = sapply(3:ncol(tablec),function(x){
print(x)
unique(tablec[3:134,x])
})
length(which(uunq == c("B", "A") | uunq == c("A", "B")))
length(which(unq == 3))
keep = which(unq == 3)
tablecc = tablec[,c(1,2,(keep+2))]
tablecc[1:2,1:2] = ""
ranc = sample(3:ncol(tablecc),50)
sapply(3:ncol(tablecc), function(x){
colnames(tablecc)[x] <<- paste("Marker",colnames(tablecc)[x], sep = "")
})
write.table(tablecc[,c(1,2,ranc)], "Howell-Cross-ObjectC3-Sample.csv",
row.names = F,col.names = T, sep = ",")
write.table(tablecc[,c(1,2,ranc)], "Howell-Cross-ObjectC3-Sample.csv",
row.names = F,col.names = T, sep = ",")
write_csv(tablecc, "Howell-Cross-ObjectC3.csv")
#####Adding a column for the ratio of Spliced/Unspliced#####
rat = sapply(3:dim(tablecc)[1],function(x){
as.numeric(tablecc[x,1])/
as.numeric(tablecc[x,2])
})
tablerat = cbind(c("","",rat),tablecc[,3:dim(tablecc)[2]])
colnames(tablerat)[1] <- "Ratio"
write_csv(tablerat, "Howell-Cross-Object-Ratio.csv")
#####now to run the small scale analysis#####
crossobj = read.cross(format = "csv", file = "Howell-Cross-Object-Ratio.csv")
crossobj = drop.nullmarkers(crossobj)
crossobj <- calc.genoprob(crossobj)
outv <- scanonevar(cross = crossobj,
mean.formula = Ratio ~ mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
outv <- scanonevar(cross = crossobj,
mean.formula = Ratio ~ mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
dat <- read_csv(file = "simulated_resp.csv")
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
dat <- read_csv(file = "simulated_resp.csv")
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
dat <- read_csv(file = "SimulatedResponse.csv")
small_dat <- sample(dat, 100)
View(small_dat)
small_dat <- dat[4:]sample(dat, 100)
small_dat <- dat[sample(4:, 100),]
small_dat <- dat[sample(4:6675, 100),]
View(small_dat)
print(small_dat.head())
print(small_dat.head
print(small_dat.head)
head(small_dat)
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
dat <- read_csv(file = "SimulatedResponse.csv")
small_dat <- dat[sample(4:6675, 100),]
write_rds(small_dat, "small_dat.rds")
#vQTL with simulated data
library("qtl")
library("vqtl")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# RDS Path
dat <- read_rds("small_dat.rds")
dat <- drop.nullmarkers(dat)
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# RDS Path
dat <- read.cross("small_dat.rds")
write_csv(small_dat, "small_dat.csv")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# RDS Path
dat <- read.cross("small_dat.csv")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "C:/Users/Thomas/Documents/GitHub/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# RDS Path
dat <- read.cross(file = "small_dat.csv")
gwd
getwd()
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
dat <- read.cross(file = "./SimulatedResponse.csv")
small_dat <- rbind(dat[1:3,],small_dat)
small_dat[1,]
small_dat <- rbind(dat[1:3,],small_dat)
dat[1:3,]
small_dat <- rbind(as.data.frame(dat[1:3,]),small_dat)
dat <- read_csv(file = "SimulatedResponse.csv")
small_dat <- rbind(dat[1:3,],small_dat)
View(small_dat)
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
dat <- read_csv(file = "SimulatedResponse.csv")
small_dat <- dat[sample(4:6675, 100),]
small_dat <- rbind(dat[1:3,],small_dat)
small_dat[1,]
write_csv(small_dat, "small_dat.csv")
write_csv(small_dat, "small_dat.csv")
#vQTL with simulated data
library("qtl")
library("vqtl")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
dat <- read.cross(file = "./SimulatedResponse.csv")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "./SimulatedResponse.csv")
# RDS Path
small_dat <- read.cross(file = "./small_dat.csv")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "./SimulatedResponse.csv")
# RDS Path
small_dat <- read.cross(file = "./small_dat.csv")
dat <- drop.nullmarkers(dat)
#scan with variance
dat <- calc.genoprob(dat)
outv <- scanonevar(cross = dat,
mean.formula = Height ~ Low.Water + Low.Nitrogen + Pathogen + mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
