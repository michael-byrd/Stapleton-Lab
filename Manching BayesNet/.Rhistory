install.packages("qPCR")
install.packages("qpcR")
# install.packages("qpcR")
library(qpcR)
hex <- read.csv(file = url("https://raw.githubusercontent.com/tbillman/Stapleton-Lab/master/qpcR/2-13-18/Stapleton%20Test%202.13.18%20HEX.csv"))
m <- modlist(x = hex, cyc = 1, model = l4, remove = "none")
heff = lapply(1:length(m),function(x){
tryCatch(
efficiency(m[[x]],plot = FALSE)
, error = function(e) print(c(e,x))
)
})
hcpd1 = vector(); hcpd1 = lapply(1:length(heff),function(x){
hcpd1 = c(hcpd1, heff[[x]]$cpD1)
})
hcpd1 = unlist(hcpd1)
hcpd2 = vector(); hcpd2 = lapply(1:length(heff),function(x){
hcpd2 = c(hcpd2, heff[[x]]$cpD2)
})
hcpd2 = unlist(hcpd2)
eff.frame = as.data.frame(rbind(hcpd1,hcpd2))
colnames(eff.frame) = colnames(hex)[-c(1)]; rownames(eff.frame) = c("cpD1","cpD2")
write.csv(eff.frame, file= "C:/Users/mbyrd/Documents/StapletonLab/Stapleton_Lab/qPCR/EffDat1.csv")
# install.packages("qpcR")
library(qpcR)
x <- c(x_1,x_2,x_3)
y <- c(y_1,y_2,y_3)
result = outer(x, y, "-")
4,5,6
4,5,6
4,5,6
x <- c(4,5,6)
y <- c(1,2,3)
result = outer(x, y, "-")
View(result)
View(result)
mean(upper(result))
mean(upper.tri(result))
upper.tri(result)
mean(upper.tri(result))
mean(upper.tri(result, diag = TRUE))
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
dat <- read_csv(file = "SimulatedResponse.csv")
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
dat <- read_csv(file = "SimulatedResponse.csv")
dat <- read.csv(file = "SimulatedResponse.csv")
small_dat <- dat[sample(4:6675, 30),]
small_dat <- rbind(dat[1:3,],small_dat)
small_dat[1,]
write_csv(small_dat, "small_dat.csv")
write.csv(small_dat, "small_dat.csv")
#vQTL with simulated data
library("qtl")
library("vqtl")
library("vqtl")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "./SimulatedResponse.csv")
# RDS Path
small_dat <- read.cross(file = "./small_dat.csv")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "./SimulatedResponse.csv")
# RDS Path
small_dat <- read.cross(file = "./small_dat.csv")
dat <- drop.nullmarkers(dat)
#vQTL with simulated data
library("qtl")
library("vqtl")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "./SimulatedResponse.csv")
# RDS Path
dat <- read.cross(file = "./small_dat.csv")
dat <- drop.nullmarkers(dat)
#scan with variance
dat <- calc.genoprob(dat)
outv <- scanonevar(cross = dat,
mean.formula = Height ~ Low.Water + Low.Nitrogen + Pathogen + mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
library("dplyr")
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
y = 1:length(outv$result$loc.name)
#effect sizes can not be computed for these 3 SNPs
sizedf = sapply(y, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = dat,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = outv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
#vQTL with simulated data
library("qtl")
library("vqtl")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "./SimulatedResponse.csv")
# RDS Path
dat <- read.cross(file = "./small_dat.csv")
dat <- drop.nullmarkers(dat)
#scan with variance
dat <- calc.genoprob(dat)
outv <- scanonevar(cross = dat,
mean.formula = Height ~ Low.Water + Low.Nitrogen + Pathogen + mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
library("dplyr")
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
y = 1:length(outv$result$loc.name)
#effect sizes can not be computed for these 3 SNPs
sizedf = sapply(y, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = dat,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = outv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
#effect sizes can not be computed for these 3 SNPs
sizedf = sapply(y, function(x){
tryCatch({
# print(x)
tempm =  effect.sizes(cross = dat,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = outv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
#effect sizes can not be computed for these 3 SNPs
sizedf = sapply(y, function(x){
tryCatch({
# print(x)
tempm =  effect.sizes(cross = dat,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = outv$result$loc.name[x])
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
function
#effect sizes can not be computed for these 3 SNPs
sizedf = sapply(y, function(x){
tryCatch({
# print(x)
tempm =  effect.sizes(cross = dat,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = outv$result$loc.name[x])
sprintf("tempm success on %d", x)
}, error = function(e) message(e){
sprintf("error %s on %d", e, x)
},
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
#effect sizes can not be computed for these 3 SNPs
sizedf = sapply(y, function(x){
tryCatch({
# print(x)
tempm =  effect.sizes(cross = dat,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = outv$result$loc.name[x])
# sprintf("tempm success on %d", x)
}, error = function(e) message(e){
# sprintf("error %s on %d", e, x)
},
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
#effect sizes can not be computed for these 3 SNPs
sizedf = sapply(y, function(x){
tryCatch({
# print(x)
tempm =  effect.sizes(cross = dat,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = outv$result$loc.name[x])
# sprintf("tempm success on %d", x)
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
?traceback
traceback
#effect sizes can not be computed for these 3 SNPs
sizedf = sapply(y, function(x){
tryCatch({
# print(x)
tempm =  effect.sizes(cross = dat,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = outv$result$loc.name[x])
# sprintf("tempm success on %d", x)
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
setwd("~/StapletonLab/Thomas_Stapleton_Lab_Forked/Stapleton-Lab/Manching BayesNet")
dat <- read.csv(file = "SimulatedResponse.csv")
small_dat <- dat[sample(4:6675, 5),]
small_dat <- rbind(dat[1:3,],small_dat)
small_dat[1,]
write.csv(small_dat, "small_dat.csv")
write.csv(small_dat, "small_dat.csv")
#vQTL with simulated data
library("qtl")
library("vqtl")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "./SimulatedResponse.csv")
# RDS Path
dat <- read.cross(file = "./small_dat.csv")
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv)
#vQTL with simulated data
library("qtl")
library("vqtl")
# Michael Stampede Path
# dat <- read.cross(file = "/work/04908/mcb4548/stampede2/GitHub/Thomas_Code_Forked/Stapleton-Lab/Manching\ BayesNet/SimulatedResponse.csv")
# Thomas Git Path
# dat <- read.cross(file = "./SimulatedResponse.csv")
# RDS Path
dat <- read.cross(file = "./small_dat.csv")
dat <- drop.nullmarkers(dat)
#scan with variance
dat <- calc.genoprob(dat)
outv <- scanonevar(cross = dat,
mean.formula = Height ~ Low.Water + Low.Nitrogen + Pathogen + mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
library("dplyr")
effect.sizes = function (cross, phenotype.name, focal.groups = NULL, nuisance.groups = NULL,
genotype.names = c("AA", "AB", "BB"), xlim = NULL, ylim = NULL,
title = paste(phenotype.name, "by", paste(focal.groups,
collapse = ", ")), draw_ribbons = TRUE, se_line_size = 1,
point_size = 1)
{
indiv.mean.estim <- indiv.mean.lb <- indiv.mean.ub <- "fake_global_for_CRAN"
indiv.sd.estim <- indiv.sd.lb <- indiv.sd.ub <- "fake_global_for_CRAN"
group.mean.estim <- group.mean.ub <- group.mean.lb <- "fake_global_for_CRAN"
group.sd.estim <- group.sd.ub <- group.sd.lb <- "fake_global_for_CRAN"
modeling.df <- dplyr::data_frame(placeholder = rep(NA, qtl::nind(cross)))
modeling.df[[phenotype.name]] <- cross[["pheno"]][[phenotype.name]]
marker.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.geno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.geno(cross = cross))])
phen.names <- c(focal.groups[focal.groups %in% colnames(qtl::pull.pheno(cross = cross))],
nuisance.groups[nuisance.groups %in% colnames(qtl::pull.pheno(cross = cross))])
for (marker.name in marker.names) {
modeling.df[[marker.name]] <- factor(x = qtl::pull.geno(cross = cross)[,
marker.name], labels = genotype.names)
}
for (phen.name in phen.names) {
modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
y = 1:length(outv$result$loc.name)
#effect sizes can not be computed for these 3 SNPs
sizedf = sapply(y, function(x){
tryCatch({
print(x)
tempm =  effect.sizes(cross = dat,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = outv$result$loc.name[x])
# sprintf("tempm success on %d", x)
}, error = function(e) message(e),
finally = function(tempm){
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
}
)
})
length(outv$result$loc.name)
View(outv)
View(effect.sizes)
effect.sizes
